generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  phone           String          @unique
  password        String
  status          Boolean         @default(true)
  device_type     DeviceType      @default(android)
  device_token    String?
  dob             DateTime?       // ✅ Date of birth (optional)
  gender          Gender?         @default(male)
  language        Language        @default(en)    // ✅ Language enum
  notifications_enabled Boolean   @default(true)  // ✅ Notifications on/off
  wallet_balance  Decimal         @default(0.00) @db.Decimal(10, 2) // ✅ Wallet balance
  profile_image   String?         @db.Text        // ✅ Profile image URL or base64
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?

  notifications   Notification[]
}

enum DeviceType {
  android
  ios
}

enum Gender {
  male
  female
  other
}

enum Language {
  ar
  en
}



model OTPVerification {
  id        Int      @id @default(autoincrement())
  phone     String
  otp       String
  created_at DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
}
model Faq {
  id          Int      @id @default(autoincrement())
  question    String   @db.Text     // Long-form question
  answer      String   @db.Text     // Long-form answer
  status      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

   @@map("faq") // Custom table name
}

model Card {
  id                 Int       @id @default(autoincrement())
  user_id            Int?      
  card_holder_name   String?   @db.Text
  exp_date_month     String?   @db.Text
  exp_date_year      String?   @db.Text
  formated_card_no   String?   @db.Text
  payment_id         String?   @db.Text
  token              String?   @db.Text
  verification_token String?   @db.Text
  status            Boolean  @default(true)
  is_default        Boolean  @default(false)
  card_type          String?   @db.VarChar(30)
  created_at         DateTime  @default(now())
  updated_at         DateTime? 
  deleted_at         DateTime? 

  @@map("cards") // maps to the actual table name if it is "cards"
}

model Address {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  address_type  AddressType @default(home)
  full_address  String?   @db.Text
  lat           String?   @db.VarChar(20)
  lng           String?   @db.VarChar(20)
  house_number  String?   @db.VarChar(100)
  is_default    Boolean   @default(false)
  status        Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime?

  @@map("address") // optional: use if actual table name is "address"
}

enum AddressType {
  home
  work
  other
}

model WalletTransaction {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  operation_type OperationType @default(A)
  amount         Decimal   @default(0.00) @db.Decimal(10, 2)
  description    String?   @db.Text
  description_ar String?   @db.Text
  created_at     DateTime  @default(now()) @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  deleted_at     DateTime? @db.DateTime(0)

  @@map("wallet_transactions") // table name
}

enum OperationType {
  S
  A
}
model PaymentDetail {
  id                Int       @id @default(autoincrement())
  order_id          Int?
  payment_id        String?   @db.Text
  payment_type      PaymentType  @default(card)
  payment_status    PaymentStatus @default(pending)
  payment_response  String?   @db.Text
  amount            Decimal   @default(0.00) @db.Decimal(10, 2)
  payment_message   String?   @db.Text
  transaction_type  String?   @db.VarChar(200)
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  deleted_at        DateTime?

  @@map("payment_details") // table name
}

enum PaymentType {
  card
  wallet
  apple_pay
}

enum PaymentStatus {
  success
  failed
  pending
}




model Admin {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model AppSetting {
  id              Int      @id @default(autoincrement())
  app_label       String
  app_type        String   // "android" | "ios"
  app_version     Int
  force_updates   Boolean  @default(false)
  maintenance_mode Boolean @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?
}

model AppVariable {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model AppMenuLink {
  id         Int      @id @default(autoincrement())
  name       String   @unique // e.g. about_us
  show_name  String
  for        String   // "user" | "admin"
  type       String   // e.g. ckeditor
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id])
}


